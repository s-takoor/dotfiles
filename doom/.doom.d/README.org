#+title: DOOM EMACS LITERATE CONFIG
#+author: s.takoor
#+auto_tangle: t
#+startup: showeverything
#+filetags: :doom:emacs:config:org:

** TABLE OF CONTENTS :toc:
  - [[#tldr][TL;DR]]
  - [[#emacs-installation][EMACS INSTALLATION]]
  - [[#configel][CONFIG.EL]]
  - [[#initel][INIT.EL]]
  - [[#packagesel][PACKAGES.EL]]

** TL;DR
The following is my literate *DOOM EMACS* config file. It contains the three main files ~init.el~, ~config.el~, and ~packages.el~ required to configure ~Doom Emacs~, which is written in ~Emacs Lisp~.

-----

** EMACS INSTALLATION
*** PREREQUISITES
Before installing ~Doom Emacs~, ensure the following packages are installed:
- Git
- Emacs
- ripgrep
- GNU Find
- fd (optional)

*** DEPENDENCIES & DEPENDENCIES
There exists various options for installing ~Emacs~ on ~macOS~. Ensure a package manager is installed to facilitate this process. The following assumes the package manager is ~Homebrew~.

**** DEPENDENCIES
#+begin_src sh
# required dedenpdencies
brew install git ripgrep
# optional dependencies
brew install coreutils fd
# install clang
xcode-select --install
#+end_src

**** EMACS
There are three formulas that are considered as the best options for ~Doom~. I prefer using ~emacs-plus~ as it offers a wide range of extra functionality over the regular Emacs package.
- ~emacs-mac~ formula offers good integration with ~macOS~, native emojis and better childframe support.
- ~emacs-plus~ formula from [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted]].
#+begin_src sh
brew tap d12frosted/emacs-plus
# install emacs+ with some additional options
brew install emacs-plus --with-native-comp --with-modern-doom3-icon
cp -r /opt/homebrew/opt/emacs-plus/Emacs.app /Applications/
#+end_src

- ~emacs~ formula is another acceptable option but does ~not~ provide a ~Emacs.app~.

*** DOOM EMACS
After installing ~Emacs~ and ~Doom~'s dependencies, ~Doom Emacs~ can be installed:
#+begin_src sh
git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+end_src

-----
** CONFIG.EL
*** ABOUT
#+begin_src emacs-lisp :tangle "config.el"
(setq user-full-name "s.t"
      user-mail-address "shashiduth.takoor@gmail.com")
#+end_src

*** SET FONTS
#+begin_src emacs-lisp :tangle "config.el"
(setq doom-font (font-spec :family "JetBrainsMono NF" :size 12 :weight 'light)
      doom-big-font (font-spec :family "JetBrainsMono NF" :size 12 :weight 'light)
      doom-serif-font (font-spec :family "JetBrainsMono NF" :size 12 :weight 'light)
      doom-unicode-font (font-spec :family "JetBrainsMono NF" :size 12 :weight 'light)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono NF" :size 12 :weight 'light))
#+end_src

*** NERD ICONS
~nerd icons~ is an alternative to ~all-the-icons~. A ~nerd font~ is required on the system.
#+begin_src emacs-lisp :tangle "config.el"
(use-package nerd-icons)
#+end_src

**** NERD ICONS COMPLETION
#+begin_src emacs-lisp :tangle "config.el"
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

**** NERD ICONS DIRED
#+begin_src emacs-lisp :tangle "config.el"
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

**** NERD ICONS TREEMACS
#+begin_src emacs-lisp :tangle "config.el"
(use-package treemacs-nerd-icons
  :config
  (treemacs-load-theme "nerd-icons"))
#+end_src

*** LINE SPACING
#+begin_src emacs-lisp :tangle "config.el"
(setq-default line-spacing 0.2)
#+end_src

*** THEME
#+begin_src emacs-lisp :tangle "config.el"
(use-package modus-themes
  :ensure t
  :custom
  (modus-themes-bold-constructs t)
  (modus-themes-italic-constructs t)
  (modus-themes-mixed-fonts t)
  (modus-themes-prompts '(italic bold))
  (modus-themes-completions '((matches . (extrabold))
                              (selection . (semibold underline))))
  (modus-themes-org-blocks 'gray-background)
  (modus-themes-headings
   '((1 . (variable-pitch 1.5))
     (2 . (1.3))
     (agenda-date . (1.3))
     (agenda-structure . (variable-pitch light 2))
     (t . (1.1))))
  :init
  (load-theme 'modus-vivendi t))
#+end_src

*** MINIMAL UI
#+begin_src emacs-lisp :tangle "config.el"
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode 1)
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

*** SET FRAME OPACITY
#+begin_src emacs-lisp :tangle "config.el"
(set-frame-parameter (selected-frame) 'alpha '(70 . 50))
(add-to-list 'default-frame-alist '(alpha . (70 . 50)))
#+end_src

*** BEACON MODE
#+begin_src emacs-lisp :tangle "config.el"
(use-package beacon
  :init
  (beacon-mode 1))
#+end_src

*** CONFIGURE LINE NUMBERS
#+begin_src emacs-lisp :tangle "config.el"
(setq display-line-numbers-type 'relative)
#+end_src

*** DOOM MODELINE
#+begin_src emacs-lisp :tangle "config.el"
(after! doom-modeline
(setq doom-modeline-enable-word-count t
      doom-modeline-window-width-limit nil
      doom-modeline-battery t
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-lsp t
      doom-modeline-bar-width 4))
#+end_src

*** CENTAUR-TABS
#+begin_src emacs-lisp :tangle "config.el"
(setq centaur-tabs-default-font "Iosevka NF"
      centaur-tabs-set-bar 'right
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-close-button "⨂"
      centaur-tabs-modified-marker "⨀")
#+end_src

*** ORG-AUTO-TANGLE
The ~org-auto-tangle~ package automatically tangle org files on save. This is achieved by adding the option ~#+auto_tangle: t~. If instead you would like to manually tangle the org file on save, the following emacs keybindings can be used ~C-c C-v C-t~

The tangling process happens asynchronously, therefore it will not block the current emacs session.
#+begin_src emacs-lisp :tangle "config.el"
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

*** ORG-ALERT
#+begin_src emacs-lisp :tangle "config.el"
(use-package org-alert
  :ensure t
  :custom (alert-default-style 'osx-notifier)
  :config
  (setq org-alert-interval 1200
        org-alert-notification-title "Org Alert Reminder!")
  (org-alert-enable))
#+end_src

*** ORG-BABEL CONFIGURATION
#+begin_src emacs-lisp :tangle "config.el"
;; Set the default Python interpreter to Python3
(setq org-babel-python-command "python3")

;; Set ditaa path
(setq org-ditaa-jar-path "/opt/homebrew/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar")
#+end_src

*** ORG-MODE CONFIGURATION
#+begin_src emacs-lisp :tangle "config.el"
(setq org-directory "~/Documents/orgfiles/"
      org-agenda-files '("~/Documents/orgfiles/agenda.org")
      org-agenda-tags-column 0
      org-agenda-block-separator ?─
      org-auto-align-tags nil
      org-catch-invisible-edits 'show-and-error
      org-edit-src-content-indentation 0
      org-ellipsis " ▼ "
      org-hide-emphasis-markers t
      org-hide-leading-stars t
      org-insert-heading-respect-content t
      org-log-done t
      org-pretty-entities t
      org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-special-ctrl-a/e t
      org-startup-indented nil
      org-tags-column 0
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string
      "⭠ now ─────────────────────────────────────────────────")
#+end_src

*** ORG-MODERN
The ~org modern~ package implements a modern style for Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks. 
#+begin_src emacs-lisp :tangle "config.el"
(use-package org-modern
  :ensure t
  :config
  (setq org-modern-table-vertical 1
        org-modern-table-horizontal 1
        org-modern-horizontal-rule t)
  :init
  (global-org-modern-mode))
#+end_src

*** ORG-LATEX
#+begin_src emacs-lisp :tangle "config.el"
(require 'ox-latex)

;; Set LaTeX compiler to XeLaTeX
(add-hook! 'latex-mode-hook
  (setq TeX-engine 'xelatex) 99)

;;(setq org-latex-pdf-process (list "latexmk -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o %f"))

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[letterpaper]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 )))
#+end_src

*** PDF-TOOLS
#+begin_src emacs-lisp :tangle "config.el"
;; Automatically update buffer
(setq auto-revert-interval 0.5)
#+end_src

*** VERTICO
The ~vertico~ package provides a performant and minimalistic vertical completion IO based on the default completion system.
#+begin_src emacs-lisp :tangle "config.el"
(use-package vertico
  :ensure t
  :init
  (require 'vertico-directory)
  (vertico-mode t))
#+end_src

*** MARGINALIA
The ~marginalia~ package adds annotations to the completion candidates at the margin of the minibuffer.
#+begin_src emacs-lisp :tangle "config.el"
(use-package marginalia
  :ensure t
  :custom
  (marginalia-annotators
   '(marginalia-annotators-heavy marginalia-annotators-light t))
  :config
  (marginalia-mode))
#+end_src

*** SAVEHIST
The ~savehist~ package persist history over Emacs restarts. ~vertico~ sorts by history position.
#+begin_src emacs-lisp :tangle "config.el"
(use-package savehist
  :init
  (savehist-mode))
#+end_src

*** ORDERLESS
This package provides an ~orderless~ completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. Each component can match in any one of several ways: ~literally~, as a ~regexp~, as an ~initialism~, in the flex style, or as ~multiple word prefixes~. ~regexp~ and ~literal~ matches are enabled by default.
#+begin_src emacs-lisp :tangle "config.el"
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(basic flex initials orderless substring))
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** CONSULT
#+begin_src emacs-lisp :tangle "config.el"
(use-package consult
  :ensure t
  :after vertico
  :custom
  (completion-in-region-function #'consult-completion-in-region))
#+end_src

*** EMBARK
#+begin_src emacs-lisp :tangle "config.el"
(use-package embark
  :ensure t
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** CORFU
Corfu completion module
#+begin_src emacs-lisp :tangle "config.el"
(use-package corfu
  :ensure t
  ;; Optional customizations
  :custom
  (corfu-cycle t)                 ; Allows cycling through candidates
  (corfu-auto t)                  ; Enable auto completion
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.8)
  (corfu-popupinfo-delay '(0.5 . 0.2))
  (corfu-preview-current 'insert) ; insert previewed candidate
  (corfu-preselect 'prompt)
  (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator)
              ("TAB"        . corfu-next)
              ([tab]        . corfu-next)
              ("S-TAB"      . corfu-previous)
              ([backtab]    . corfu-previous)
              ("S-<return>" . corfu-insert)
              ("RET"        . nil))

  :init
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode) ; Popup completion info
  :config
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
                                   corfu-quit-no-match t
                                   corfu-auto nil)
              (corfu-mode))))
#+end_src

*** CAPE
#+begin_src emacs-lisp :tangle "config.el"
(use-package cape
  :ensure t
  :defer 10
  :bind ("C-c f" . cape-file)
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; (defalias 'dabbrev-after-2 (cape-capf-prefix-length #'cape-dabbrev 2))
  ;; (add-to-list 'completion-at-point-functions 'dabbrev-after-2 t)
  (cl-pushnew #'cape-file completion-at-point-functions)
  :config
  ;; Silence then pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src


-----

** INIT.EL
The ~init.el~ file controls what ~Doom~ modules are enabled and what order they load in. Remember to run ~doom sync~ after modifying it!

#+begin_quote
󰐃 Press ~SPC h d h~ (or ~C-h d h~ for non-vim users) to access Doom's documentation. There you'll find a link to Doom's Module Index where all of our modules are listed, including what flags they support.

Move your cursor over a module's name (or its flags) and press ~K~ (or ~C-c c k~ for non-vim users) to view its documentation. This works on flags as well (those symbols that start with a plus).

Alternatively, press ~gd~ (or ~C-c c d~) on a module to browse its directory (for easy access to its source code).
#+end_quote

#+begin_src emacs-lisp :tangle "init.el"
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +orderless +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe)              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +eglot)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex +latexmk +lsp +fold)             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +hugo +present)              ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +tree-sitter)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp +tree-sitter)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +fish +tree-sitter)               ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;; literate
       (default +bindings +smartparens))
#+end_src

-----

** PACKAGES.EL
The ~package.el~ file lists all packages to be installed with ~Doom Emacs~. Each line specifies the name of a package and any additional configuration options. After declaring the package name in the ~packages.el~ file, you will have to run ~doom sync~ on the command line or ~SPC h r r~, then restart ~Emacs~ for the changes to take effect -- or use ~M-x doom/reload~.

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
(package! some-package)

To install a package directly from a remote git repo, you must specify a `:recipe'. You'll find [[https://github.com/radian-software/straight.el#the-recipe-format][documentation]] on what `:recipe' accepts here:
(package! another-package
  :recipe (:host github :repo "username/repo"))

If the package you are trying to install does not contain a PACKAGENAME.el file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))

If you'd like to disable a package included with Doom, you can do so here with the `:disable' property:
(package! builtin-package :disable t)

You can override the recipe of a built in package without having to specify all the properties for `:recipe'. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror:
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))

Specify a `:branch' to install a package from a particular branch or tag. This is required for some packages whose default branch isn't 'master'
(package! builtin-package :recipe (:branch "develop"))

Use `:pin' to specify a particular commit to install.
(package! builtin-package :pin "1a2b3c4d5e")

Doom's packages are pinned to a specific commit and updated from release to release. The `unpin!' macro allows you to unpin single packages...
(unpin! pinned-package)
...or multiple packages
(unpin! pinned-package another-pinned-package)
...Or *all* packages (NOT RECOMMENDED; will likely break things)
(unpin! t)

#+begin_src emacs-lisp :tangle "packages.el"
(package! beacon)
(package! cape)
(package! corfu)
(package! org-alert)
(package! org-auto-tangle)
(package! org-modern)
(package! nerd-icons-completion)
(package! nerd-icons-corfu)
(package! nerd-icons-dired)
(package! treemacs-nerd-icons)
#+end_src
